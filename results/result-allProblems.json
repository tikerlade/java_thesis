{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Initialization",
  "type": "Double brace initialization",
  "severity": "High",
  "comment": "Double brace initialization",
  "detailsInfo": "Reports [Double Brace Initialization](https://www.c2.com/cgi/wiki?DoubleBraceInitialization).\n\nDouble brace initialization may cause memory leaks when used in a non-static context because it creates an anonymous class\nthat will reference the surrounding object.\n\nCompared to regular initialization, double brace initialization provides worse performance since it requires loading an\nadditional class.\n\nIt may also cause failure of `equals()` comparisons if the `equals()` method doesn't accept subclasses as\nparameters.\n\nIn addition, before Java 9, double brace initialization couldn't be combined with the diamond operator since it was incompatible\nwith anonymous classes.\n\n**Example:**\n\n\n      List<Integer> list = new ArrayList<>() {{\n        add(1);\n        add(2);\n      }};\n\nAfter the quick-fix is applied:\n\n\n      List<Integer> list = new ArrayList<>();\n      list.add(1);\n      list.add(2);\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/CnfFormula.java",
      "language": "JAVA",
      "line": 20,
      "offset": 66,
      "length": 9,
      "code": {
        "startLine": 18,
        "length": 9,
        "offset": 109,
        "surroundingCode": "    String variableRegex = \"[a-zA-Z0-9]+\";\n\n    HashMap<BooleanOperation, Character> allowedOperations = new HashMap<>() {{\n            put(BooleanOperation.NEGATION, '-');\n            put(BooleanOperation.AND, '&');"
      }
    }
  ],
  "attributes": {
    "module": "java_thesis.main",
    "inspectionName": "DoubleBraceInitialization"
  },
  "hash": "88dedeb5eff95eca127cbbb18f416f2a2cd7067022ef9d7a73b893f0e4dd3948"
}]}