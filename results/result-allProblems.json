{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Resource management",
  "type": "I/O resource opened but not safely closed",
  "severity": "High",
  "comment": "'Scanner' should be opened in front of a 'try' block and closed in the corresponding 'finally' block",
  "detailsInfo": "Reports I/O resources that are not safely closed. I/O resources checked by this inspection include `java.io.InputStream`, `java.io.OutputStream`, `java.io.Reader`, `java.io.Writer`, `java.util.zip.ZipFile`, `java.io.Closeable` and `java.io.RandomAccessFile`.\n\n\nI/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.\n\n\nBy default, the inspection assumes that the resources can be closed by any method with\n'close' or 'cleanup' in its name.\n\n**Example:**\n\n\n      void save() throws IOException {\n        FileWriter writer = new FileWriter(\"filename.txt\"); //warning\n        writer.write(\"sample\");\n      }\n\n\nUse the following options to configure the inspection:\n\n* List I/O resource classes that do not need to be closed and should be ignored by this inspection.\n* Whether an I/O resource is allowed to be opened inside a `try`block. This style is less desirable because it is more verbose than opening a resource in front of a `try` block.\n* Whether the resource can be closed by any method call with the resource passed as argument.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ru/spbstu/icst/problems/CnfFormula.java",
      "language": "JAVA",
      "line": 241,
      "offset": 31,
      "length": 7,
      "code": {
        "startLine": 239,
        "length": 7,
        "offset": 91,
        "surroundingCode": "    @Override\n    public void readInput() throws Exception {\n        Scanner scanner = new Scanner(System.in);\n\n        // Get data from user"
      }
    }
  ],
  "attributes": {
    "module": "java_thesis.main",
    "inspectionName": "IOResource"
  },
  "hash": "c10d300964d2688852f32cb8f9ae46d75427088e1480abbc669735f6a5aa7fb7"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of obsolete collection type",
  "severity": "High",
  "comment": "Obsolete collection type `Stack` used",
  "detailsInfo": "Reports usages of `java.util.Vector`, `java.util.Hashtable` and `java.util.Stack`.\n\nUsages of these classes can often be replaced with usages of\n`java.util.ArrayList`, `java.util.HashMap` and `java.util.ArrayDeque` respectively.\nWhile still supported,\nthe former classes were made obsolete by the JDK1.2 collection classes, and should probably\nnot be used in new development.\n\n\nUse the **Ignore obsolete collection types where they are required** option to ignore any cases where the obsolete collections are used\nas method arguments or assigned to a variable that requires the obsolete type.\nEnabling this option may consume significant processor resources.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ru/spbstu/icst/reductions/CnfTo3CnfReduction.java",
      "language": "JAVA",
      "line": 25,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 23,
        "length": 14,
        "offset": 146,
        "surroundingCode": "        for (ArrayList<Literal> clause : cnfFormula.clauses) {\n            // Here we will store copies of literals of current clause\n            Stack<Literal> clauseStack = new Stack<>();\n\n            // Put copies of literals"
      }
    }
  ],
  "attributes": {
    "module": "java_thesis.main",
    "inspectionName": "ObsoleteCollection"
  },
  "hash": "bad2aba8fc0b6909041d2f1b79b8d816e03b466c22f02f050694f9d73c40d1b7"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of obsolete collection type",
  "severity": "High",
  "comment": "Obsolete collection type `Stack<>` used",
  "detailsInfo": "Reports usages of `java.util.Vector`, `java.util.Hashtable` and `java.util.Stack`.\n\nUsages of these classes can often be replaced with usages of\n`java.util.ArrayList`, `java.util.HashMap` and `java.util.ArrayDeque` respectively.\nWhile still supported,\nthe former classes were made obsolete by the JDK1.2 collection classes, and should probably\nnot be used in new development.\n\n\nUse the **Ignore obsolete collection types where they are required** option to ignore any cases where the obsolete collections are used\nas method arguments or assigned to a variable that requires the obsolete type.\nEnabling this option may consume significant processor resources.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ru/spbstu/icst/reductions/CnfTo3CnfReduction.java",
      "language": "JAVA",
      "line": 25,
      "offset": 46,
      "length": 7,
      "code": {
        "startLine": 23,
        "length": 7,
        "offset": 179,
        "surroundingCode": "        for (ArrayList<Literal> clause : cnfFormula.clauses) {\n            // Here we will store copies of literals of current clause\n            Stack<Literal> clauseStack = new Stack<>();\n\n            // Put copies of literals"
      }
    }
  ],
  "attributes": {
    "module": "java_thesis.main",
    "inspectionName": "ObsoleteCollection"
  },
  "hash": "c67e146f066913c98ce8a5c0a99b9c7ae7edebf956115a816087d890c0f6ae67"
}]}